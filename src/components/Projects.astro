---
import Code from "./icons/Code.astro"
import Node from "./icons/Node.astro"
import Express from "./icons/Express.astro"
import Prisma from "./icons/Prisma.astro"
import PlanetScale from "./icons/PlanetScale.astro"
import Carrousel from "./Carrousel.astro"
import Tab from "./Tab.astro"
import Js from "./icons/Js.astro"
import Swagger from "./icons/Swagger.astro"
import Postman from "./icons/Postman.astro"
import Jest from "./icons/Jest.astro"
import Python from "./icons/Python.astro"
import FastAPI from "./icons/FastAPI.astro"
const PROJECTS = [
    {
        id: 1,
        title: "Backend de Appify",
        description: "Appify es una plataforma integral diseñada para la gestión financiera y administrativa, permitiendo a usuarios y empresas controlar sus finanzas, gestionar productos y servicios, y administrar relaciones con clientes y proveedores. La plataforma soporta múltiples usuarios, con configuraciones avanzadas para facturación y pagos.",
        github: "#",
        link: "https://appify.cl/",
        img: '/projectsimg/appify.webp',
        tags: [Node, Express, Prisma, PlanetScale, Js, Swagger, Postman, Jest],
        contribuciones: [
            "Diseño de Arquitectura: Implementación de una arquitectura basada en el patrón MVC (Modelo-Vista-Controlador) para mantener un código limpio, modular y fácil de mantener.",
            "Desarrollo de la Capa de Datos: Uso de Prisma como ORM para la interacción con la base de datos MySQL, asegurando operaciones eficientes y seguras.",
            "Lógica de Negocio: Implementación de la lógica de negocio en la capa de servicios, asegurando que las operaciones de datos y las reglas de negocio se ejecuten correctamente.",
            "Controladores y Rutas: Desarrollo de controladores para manejar las rutas de la API REST, gestionando las solicitudes HTTP, respuestas y manejo de errores.",
            "Integraciones Externas: Consumo de servicios externos mediante API REST, incluyendo la API de facturación electrónica y la integración con la pasarela de pagos de Mercado Pago.",
            "Autenticación y Autorización: Implementación de JWT para autenticar y autorizar usuarios, asegurando que solo usuarios legítimos puedan acceder a los recursos.",
            "Manejo de Errores y Middleware: Creación de manejadores de errores personalizados y middleware para validaciones, autenticación y otras funcionalidades comunes."
        ],
        obs: [
            "Durante el desarrollo de Appify, me encontré con varios desafíos ",
            "- Manejo de Usuarios: Fue mi primera vez trabajando en un sistema con tantos usuarios. Implementé técnicas de optimización y escalabilidad para asegurar que la plataforma pudiera manejar picos de tráfico sin problemas.",
            "- Integración Fiscal: La integración del flujo de facturación fue compleja debido a las normativas contables chilenas y la relación con el sistema de impuestos internos. Investigué a fondo y consulté con colegas más experimentados para asegurar la conformidad y precisión.",
            "- Seguridad de Datos: Asegurar la seguridad de los datos sensibles fue crucial. Implementé prácticas de seguridad y realicé pruebas exhaustivas para detectar y corregir vulnerabilidades potenciales.",
            "Para superar estos desafíos, hice mucha investigación intensiva y me apoyé en el conocimiento diverso de mi equipo. Consulté con devs sr y expertos en contabilidad para guiar mis decisiones. Además, implementé muchas pruebas de testing para garantizar la calidad y la confiabilidad del software."
        ],
        rol: "Como desarrollador backend en el proyecto Appify, participé en el diseño e implementación de la arquitectura del sistema, siguiendo un modelo estructurado de tres capas: Repository, Service y Controller. Trabajé junto a un compañero para desarrollar funcionalidades clave y asegurar la integración fluida de servicios externos."
    },
    {
        id: 2,
        title: "API de facturación",
        description: "Es una API creada para la emisión de documentos fiscales, generación de XMLs, generación de PDF y administración de usuarios autorizados a facturar.",
        github: "#",
        link: "https://appify-fas-api.vercel.app/docs",
        img: '/projectsimg/fastapidte.webp',
        tags: [Python, FastAPI, Swagger, PlanetScale],
        contribuciones: [
        "Diseño e Implementación de Endpoints: Creación de endpoints RESTful para la emisión y administración de documentos fiscales, incluyendo la generación de XML y PDF.",
        "Integración con Bases de Datos: Uso de PlanetScale para interactuar con la base de datos MySQL.",
        "Documentación de la API: Creación de documentación interactiva utilizando Swagger, facilitando a mis compañeros la comprensión y uso de la API.",
        ],
        obs: [
        "Durante el desarrollo de la API de facturación, enfrenté desafíos:",
            "- Validación de Documentos Fiscales: Implementar reglas complejas para la validación de documentos fiscales y asegurar la conformidad con las normativas vigentes.",
            "- Esta API es intermediaria entre un servicio de Software llamado LIBRE DTE y Appify, reajustar esta API, para que funcionen en conjunto fue realmente un desafio.",
            "Para superar estos desafíos, realicé una investigación exhaustiva sobre las normativas fiscales del sistema chileno, consulté con expertos, y utilicé herramientas de monitoreo y pruebas de carga para asegurar el rendimiento y la seguridad de la API. "
        ],
        rol : "Tuve que desarrollar esta API, para gestionar la administracion de clientes y su facturación. Puse en práctica la Arquitectura de Microservicios y su comunicación, es algo sumamente complicado, pero ya estaba muy familiarizado con la mayoria de conceptos y me fue esencial para este tipo de proyecto. Se realizo en FastAPI ya que facilitaba la documentacion de una manera rapida y se requeria de poco tiempo para su desarrollo. "
    },
    {
        id: 3,
        title: "Microservicio de Socket para notificaciones en tiempo real",
        description: "Este proyecto consiste en un microservicio desarrollado con Node.js que utiliza sockets para la recepción y envío de datos en tiempo real a un front-end, notificando a todos los usuarios conectados. El microservicio es capaz de manejar múltiples procesos utilizando cluster, garantizando así una alta disponibilidad y escalabilidad.",
        tecnologias_usadas: "Node.js, Express, Socket.io, Redis (para el adaptador de socket), y Cluster",
        link: "https://github.com/samugauna7job/socket_simple_for_Appify.git",
        linkToImg: "/projectsimg/socket-diagram.svg",
        img: "/projectsimg/code_socket.webp",
        tags: [],  
        funcionalidades: "Descripción de funcionalidades aquí"  
    },
    {
        id: 4,
        title: "Aplicación web de gestión interna",
        description: "Este proyecto consistió en el desarrollo de una plataforma integral de gestión interna destinada a recopilar y organizar información de clientes a través de técnicas de scraping y consumo de APIs. La finalidad principal era facilitar a los vendedores el acceso a datos relevantes sobre clientes y sus empresas, optimizando así el proceso de ventas.",
        github: "#",
        link: "#",
        imgs: [
            '/projectsimg/scraping/scraping1.webp',
            '/projectsimg/scraping/scraping2.webp',
            '/projectsimg/scraping/scaping3.webp',
            '/projectsimg/scraping/scraping4.webp',
        ],
        tags: [],  
        funcionalidades: "Descripción de funcionalidades aquí"  
    },
    {
        id: 5,
        title: "API de Scraping de Datos Tributarios",
        description: "Este proyecto consiste en el desarrollo de una API robusta utilizando Python y Flask. La API está diseñada para realizar scraping de datos tributarios del sistema de impuestos internos, obteniendo asi, informes completos sobre formularios, proporcionando una manera eficiente y automatizada de obtener esta información a través de varios endpoints seguros.",
        github: "https://github.com/samugauna7job/api-multi-scrap.git",
        link: "#",
        img: '/projectsimg/multi-scraping.webp',
        tags: [],  
        funcionalidades: "Descripción de funcionalidades aquí"  
    },
    {
        id: 6,
        title: "Recopilador Automático de Datos y Exportación a Excel",
        description: "Este recopilador masivo de datos automatiza el proceso de obtención y organización de información fiscal, mejorando la eficiencia y precisión en el manejo de grandes volúmenes de datos del SII, y facilitando la generación de reportes detallados para análisis financiero y contable.",
        github: "https://github.com/samugauna7job/api-multi-scrap.git",
        link: "#",
        img: '/projectsimg/localData.webp',
        tags: [],  
        funcionalidades: "Descripción de funcionalidades aquí"  
    },
    {
        id: 7,
        title: "Plataforma de Ecommerce Monolítica Completa",
        description: "Este proyecto es una plataforma de ecommerce monolítica desarrollada utilizando tecnologías modernas tanto en el backend como en el frontend. El sistema está diseñado para ser completamente funcional, incluyendo todas las características esenciales necesarias para operar una tienda en línea, desde la gestión de usuarios y productos hasta el procesamiento de pedidos y autenticación segura.",
        github: "https://github.com/SamuGauna/ecommerceBack.git",
        link: "#",
        imgs: [
            '/projectsimg/eco1.webp',
            '/projectsimg/eco2.webp',
        ],
        tags: [],  
        funcionalidades: "Descripción de funcionalidades aquí"  
    }
]
---

<section class="w-full mx-auto lg:w-[700px] pt-10">
    <div class="flex flex-row justify-center my-8 text-2xl">
        <Code></Code>
        <h2 class="ml-4">Proyectos</h2>
    </div>
    <div>
        {PROJECTS.map((project) => (
            <article class="justify-center mt-16">
                <h3 class="text-2xl font-semibold text-yellow-200 mb-2">{project.title}</h3>
                <p class="text-lg mb-4 text-pretty">{project.description}</p>
                {project.imgs ? (
                    <Carrousel imgs={project.imgs}></Carrousel>
                ) : project.linkToImg ? (
                    <a href={project.linkToImg} target="_blank">
                        <img class="rounded-lg w-auto h-auto" src={project.img} alt={`Captura de proyecto ${project.img}`} />
                    </a>
                ) : (
                    <img class="rounded w-auto h-auto" src={project.img} alt={`Captura de proyecto ${project.img}`} />
                )}
                <Tab class="place-items-center"
                    id={project.id}
                    tecnologias={project.tags}
                    contribuciones={project.contribuciones}
                    observaciones={project.obs}
                    rol={project.rol}
                />
            </article>
        ))}
    </div>
</section>